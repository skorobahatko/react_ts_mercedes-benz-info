[{"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\index.tsx":"1","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\app\\App.tsx":"3","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\index.ts":"4","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\reducers.ts":"5","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\actions.ts":"6","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\store.ts":"7","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\models\\index.ts":"8","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\utils\\index.ts":"9","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\models\\interfaces.ts":"10","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\utils\\api.ts":"11","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\header\\Header.tsx":"12","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\home-page\\HomePage.tsx":"13","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\index.ts":"14","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\storeTemplates.ts":"15","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-page\\index.ts":"16","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\character-self-page\\index.ts":"17","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\character-self-page\\CharacterSelfPage.tsx":"18","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\SelfCharactersCardsList.tsx":"19","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\SelfLocationsCardsList.tsx":"20","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\SelfEpisodesCardsList.tsx":"21","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\EpisodeSelfCard.tsx":"22","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\CharacterSelfCard.tsx":"23","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\index.ts":"24","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\LocationSelfCard.tsx":"25","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-page\\CharacterPage.tsx":"26","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episodes-page\\index.ts":"27","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episodes-page\\EpisodesPage.tsx":"28","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-page\\index.ts":"29","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-page\\LocationPage.tsx":"30","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\carousel-item\\index.ts":"31","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\carousel-item\\CarouselItem.tsx":"32","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-self-window\\index.ts":"33","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-self-window\\LocationWindow.tsx":"34","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\header\\index.ts":"35","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episode-self-window\\index.ts":"36","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episode-self-window\\EpisodeWindow.tsx":"37","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\search-page\\index.ts":"38","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\search-page\\SearchPage.tsx":"39","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-select\\index.ts":"40","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-select\\CharactersSelect.tsx":"41"},{"size":534,"mtime":1612902861972,"results":"42","hashOfConfig":"43"},{"size":440,"mtime":1612902800260,"results":"44","hashOfConfig":"43"},{"size":1691,"mtime":1613919142760,"results":"45","hashOfConfig":"43"},{"size":81,"mtime":1612902861973,"results":"46","hashOfConfig":"43"},{"size":3095,"mtime":1613085356191,"results":"47","hashOfConfig":"43"},{"size":3313,"mtime":1613299024084,"results":"48","hashOfConfig":"43"},{"size":215,"mtime":1612979326009,"results":"49","hashOfConfig":"43"},{"size":29,"mtime":1612902861972,"results":"50","hashOfConfig":"43"},{"size":22,"mtime":1612902861974,"results":"51","hashOfConfig":"43"},{"size":4380,"mtime":1613299199771,"results":"52","hashOfConfig":"43"},{"size":4398,"mtime":1614037938668,"results":"53","hashOfConfig":"43"},{"size":705,"mtime":1613919152713,"results":"54","hashOfConfig":"43"},{"size":1837,"mtime":1613430688376,"results":"55","hashOfConfig":"43"},{"size":127,"mtime":1612996070531,"results":"56","hashOfConfig":"43"},{"size":2061,"mtime":1612986733911,"results":"57","hashOfConfig":"43"},{"size":32,"mtime":1612996941297,"results":"58","hashOfConfig":"43"},{"size":36,"mtime":1612989867641,"results":"59","hashOfConfig":"43"},{"size":3905,"mtime":1614039267358,"results":"60","hashOfConfig":"43"},{"size":488,"mtime":1613938284887,"results":"61","hashOfConfig":"43"},{"size":1045,"mtime":1613299975632,"results":"62","hashOfConfig":"43"},{"size":996,"mtime":1613923348765,"results":"63","hashOfConfig":"43"},{"size":611,"mtime":1613299718604,"results":"64","hashOfConfig":"43"},{"size":724,"mtime":1614158067505,"results":"65","hashOfConfig":"43"},{"size":109,"mtime":1612996534440,"results":"66","hashOfConfig":"43"},{"size":622,"mtime":1613299062639,"results":"67","hashOfConfig":"43"},{"size":1950,"mtime":1613085700699,"results":"68","hashOfConfig":"43"},{"size":31,"mtime":1612997860057,"results":"69","hashOfConfig":"43"},{"size":2051,"mtime":1613085714796,"results":"70","hashOfConfig":"43"},{"size":30,"mtime":1612998795526,"results":"71","hashOfConfig":"43"},{"size":2145,"mtime":1613296095477,"results":"72","hashOfConfig":"43"},{"size":30,"mtime":1613002170068,"results":"73","hashOfConfig":"43"},{"size":337,"mtime":1613004066937,"results":"74","hashOfConfig":"43"},{"size":33,"mtime":1613082131055,"results":"75","hashOfConfig":"43"},{"size":2435,"mtime":1613919728845,"results":"76","hashOfConfig":"43"},{"size":25,"mtime":1612912984722,"results":"77","hashOfConfig":"43"},{"size":32,"mtime":1613086130539,"results":"78","hashOfConfig":"43"},{"size":2324,"mtime":1613918707515,"results":"79","hashOfConfig":"43"},{"size":29,"mtime":1613432885845,"results":"80","hashOfConfig":"43"},{"size":3821,"mtime":1613938498860,"results":"81","hashOfConfig":"43"},{"size":35,"mtime":1613925292351,"results":"82","hashOfConfig":"43"},{"size":664,"mtime":1614039302464,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"owsc1l",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\index.tsx",[],["175","176"],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\app\\App.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\reducers.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\actions.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\store.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\models\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\utils\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\models\\interfaces.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\utils\\api.ts",["177"],"import { CharactersWithInfo, Character,OneLocation, LocationWithInfo, Episode, EpisodeWithInfo } from './../models/interfaces';\r\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\r\nimport { ApiRoutesEnum } from '../models';\r\nimport { rejects } from 'assert';\r\n// import config from '../config';\r\n\r\nconst apiInstance: AxiosInstance = axios.create({\r\n  baseURL: 'https://rickandmortyapi.com/api'\r\n});\r\n\r\nclass api {\r\n  static getAllCharacters = async (url: ApiRoutesEnum, page?: number) => {\r\n      const response: AxiosResponse<CharactersWithInfo> = await apiInstance.get(url, {params: {page}})\r\n      if (!response) {\r\n        console.error('Someting goes wrong');\r\n      }\r\n      const { data } = response;\r\n      return data;\r\n  }\r\n  static getOneCharacter = async (url: string) => {\r\n    const response: AxiosResponse<Character> = await apiInstance.get(url)\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getMultiplyCharacters = async (url: string) => {\r\n    const response: AxiosResponse<Character[]> = await apiInstance.get(url)\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getFilteredCharacters = async (url: string) => {\r\n    const response: Promise<CharactersWithInfo> = new Promise((resolve, rejects) => {\r\n      apiInstance.get(url).then((response) => {\r\n        const { data } = response;\r\n        if (data) {\r\n          resolve(data)          \r\n        }\r\n      }).catch((error) => {\r\n        if (error) {\r\n          resolve({info: {count: 0, pages: 0, next: '', prev: ''}, results: []})\r\n        }\r\n      })\r\n    })\r\n    return response;\r\n  }\r\n\r\n\r\n  static getAllLocations = async (url: ApiRoutesEnum, page?: number) => {\r\n    const response: AxiosResponse<LocationWithInfo> = await apiInstance.get(url, {params: {page}})\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getOneLocation = async (url: string) => {\r\n    const response: AxiosResponse<OneLocation> = await apiInstance.get(url)\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getMultiplyLocations = async (url: string) => {\r\n    const response: AxiosResponse<Location[]> = await apiInstance.get(url)\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getFilteredLocations = async (url: string) => {\r\n    const response: Promise<LocationWithInfo> = new Promise((resolve, rejects) => {\r\n      apiInstance.get(url).then((response) => {\r\n        const { data } = response;\r\n        if (data) {\r\n          resolve(data)          \r\n        }\r\n      }).catch((error) => {\r\n        if (error) {\r\n          resolve({info: {count: 0, pages: 0, next: '', prev: ''}, results: []})\r\n        }\r\n      })\r\n    })\r\n    return response;\r\n  }\r\n\r\n\r\n  static getAllEpisodes = async (url: ApiRoutesEnum, page?: number) => {\r\n    const response: AxiosResponse<EpisodeWithInfo> = await apiInstance.get(url, {params: {page}})\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getOneEpisode = async (url: string) => {\r\n    const response: AxiosResponse<Episode> = await apiInstance.get(url)\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getMultiplyEpisodes = async (url: string) => {\r\n    const response: AxiosResponse<Episode[] | Episode> = await apiInstance.get(url)\r\n    if (!response) {\r\n      console.error('Someting goes wrong');\r\n    }\r\n    const { data } = response;\r\n    return data;\r\n  }\r\n  static getFilteredEpisodes = async (url: string) => {\r\n    const response: Promise<EpisodeWithInfo> = new Promise((resolve, rejects) => {\r\n      apiInstance.get(url).then((response) => {\r\n        const { data } = response;\r\n        if (data) {\r\n          resolve(data)          \r\n        }\r\n      }).catch((error) => {\r\n        if (error) {\r\n          resolve({info: {count: 0, pages: 0, next: '', prev: ''}, results: []})\r\n        }\r\n      })\r\n    })\r\n    return response;\r\n  }\r\n}\r\n\r\nexport { api };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\header\\Header.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\home-page\\HomePage.tsx",["178"],"import './styles.scss';\r\nimport { Header } from '../header/Header';\r\nimport { useEffect } from 'react';\r\nimport { ApiRoutesEnum, GlobalStore } from '../../models';\r\nimport { api } from '../../utils';\r\nimport { characterActions } from '../../store';\r\nimport './styles.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\n\r\nexport const HomePage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const allCharacters = useSelector((state: GlobalStore) => state.characters.allCharacters);\r\n  const location = useLocation();\r\n  \r\n  const currentPage = +location.pathname.split('page=')[1];\r\n  console.log(location);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await api.getAllCharacters(ApiRoutesEnum.getCh, currentPage);\r\n\r\n      if (res) {\r\n        dispatch(characterActions.setAllCharacters(res));\r\n      }\r\n    }\r\n    if (!allCharacters.results.length) {\r\n      fetchData();\r\n    }\r\n  }, [])\r\n\r\n  if (!allCharacters.results.length) {\r\n    return (\r\n      <div className=\"spinner-border\" role=\"status\">\r\n\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div className='container-fluid'>\r\n      <Header/>\r\n      <div className='container'>\r\n        <div className='left-side-container'>\r\n          <h1>Welcome to Rick and Morty encyclopedia</h1>\r\n        </div>\r\n        <div className='right-side-container'>\r\n          <span>There is some information about Rick and Morty serial,<br/>what u can find in internet, but:</span>\r\n          <p>There is all characters: <Link to='/characters'>Characters</Link></p>\r\n          <p>There is all locations: <Link to='/locations'>Locations</Link></p>\r\n          <p>There is all episodes: <Link to='/episodes'>Episodes</Link></p>\r\n          \r\n        </div>\r\n      </div> \r\n    </div>\r\n  )\r\n}","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\store\\storeTemplates.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-page\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\character-self-page\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\character-self-page\\CharacterSelfPage.tsx",["179","180"],"import { useEffect } from \"react\";\r\nimport { useStore, useDispatch, useSelector } from \"react-redux\"\r\nimport { useLocation, Link } from \"react-router-dom\";\r\nimport { GlobalStore, Episode } from \"../../models\";\r\nimport { characterActions, episodesActions } from '../../store';\r\nimport { api } from '../../utils';\r\nimport { ApiRoutesEnum } from '../../models';\r\nimport { Header } from '../header';\r\nimport { CharactersSelect } from '../characters-select';\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nconst CharacterSelfPage: React.FC = () => {\r\n  const store = useStore();\r\n  const dispatch = useDispatch();\r\n  const uselocation = useLocation();\r\n  const existsCharacters: GlobalStore = store.getState();\r\n  const { characters: {allCharacters} } = existsCharacters;\r\n  const id = uselocation.pathname.split('/')[uselocation.pathname.split('/').length - 1];\r\n  const isCharacterExists = allCharacters.results.find((el) => el.id === +id)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await api.getOneCharacter(`${ApiRoutesEnum.getCh}/${+id}`);\r\n      if (res) {\r\n        const { episode } = res;\r\n\r\n        if (episode.length) {\r\n          const episodeList = getEpisodesPageList(episode);\r\n          const episodeRes = await api.getMultiplyEpisodes(`${ApiRoutesEnum.getEp}/${episodeList}`)\r\n            if ((episodeRes as Episode[]).length) {\r\n              dispatch(episodesActions.setMultiplyEpisodes(episodeRes as Episode[]));\r\n            }\r\n            if ((episodeRes as Episode).id) {\r\n              dispatch(episodesActions.setOneEpisode(episodeRes as Episode));\r\n          }\r\n        }\r\n\r\n        dispatch(characterActions.setOneCharacter(res));\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n  const oneCharacter = useSelector((state: GlobalStore) => state.characters.oneCharacter);\r\n  const multiplyEpisodes = useSelector((state: GlobalStore) => state.episode.multiplyEpisodes);\r\n  const oneEpisode = useSelector((state: GlobalStore) => state.episode.oneEpisode);\r\n  console.log(oneCharacter);\r\n  const character = isCharacterExists ? isCharacterExists : oneCharacter;\r\n  if (character.id === 0) {\r\n    return (<div>wait</div>)\r\n  }\r\n  const { name, status, species, gender, origin, location, image } = character;\r\n\r\n  function getPage (param: string) {\r\n    return param.split('/')[param.split('/').length - 1]\r\n  }\r\n  function getEpisodesPageList (episodes: string[]) {\r\n    return episodes.map((el) => getPage(el))\r\n  }\r\n  function isObject (obj:any) {\r\n    if (typeof obj === 'object' && !obj.length && obj.length !== 0) {\r\n      console.log(obj, '111111')\r\n      return [obj];\r\n    }    \r\n    return obj;\r\n  }\r\n\r\n  console.log(character)\r\n\r\n  return (\r\n    <div className='container-fluid'>\r\n      <Header/>\r\n      <div className='container d-flex flex-direction-flex-start' style={{marginBottom: '15px'}}>\r\n          <div>\r\n            <h1>{name}</h1>\r\n            <span>Status: {status} | <b>{species}</b></span>\r\n            <p>Gender: <b>{gender}</b></p>\r\n            <p>Origin: {\r\n              origin.name !== 'unknown' ?\r\n              <Link to={`/locations/page=1?id=${getPage(origin.url)}`}><b>{origin.name}</b></Link> : <b>{origin.name}</b>\r\n            }\r\n            </p>\r\n            <p>Last know location: {\r\n              location.name !== 'unknown' ?\r\n              <Link to={`/locations/page=1?id=${getPage(location.url)}`}><b>{location.name}</b></Link> : <b>{location.name}</b>\r\n            }\r\n            </p>\r\n                {\r\n                  multiplyEpisodes.length ? \r\n                  <CharactersSelect {...multiplyEpisodes}/> : oneEpisode.id ? <CharactersSelect {...isObject(oneEpisode)}/> : <span>No episodes to show</span>\r\n                }\r\n          </div>  \r\n        <div>\r\n          <img src={image} alt=\"name\" style={{borderRadius: '10px'}}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport { CharacterSelfPage };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\SelfCharactersCardsList.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\SelfLocationsCardsList.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-cards-list\\SelfEpisodesCardsList.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\EpisodeSelfCard.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\CharacterSelfCard.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\self-card\\LocationSelfCard.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-page\\CharacterPage.tsx",["181"],"import { useEffect } from 'react';\r\nimport { SelfCharactersCardsList } from '../self-cards-list';\r\nimport { ApiRoutesEnum, GlobalStore } from '../../models';\r\nimport { api } from '../../utils';\r\nimport { characterActions } from '../../store';\r\nimport './styles.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Header } from '../header';\r\n\r\n\r\nconst CharacterCardsPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const allCharacters = useSelector((state: GlobalStore) => state.characters.allCharacters);\r\n  const totalPages = useSelector((state: GlobalStore) => state.characters.allCharacters.info.pages);\r\n  const location = useLocation();\r\n  \r\n  const currentPage = +location.pathname.split('page=')[1];\r\n  console.log(location);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await api.getAllCharacters(ApiRoutesEnum.getCh, currentPage);\r\n\r\n      if (res) {\r\n        dispatch(characterActions.setAllCharacters(res));\r\n      }\r\n    }\r\n    if (!allCharacters.results.length) {\r\n      fetchData();\r\n    }\r\n  }, [currentPage])\r\n\r\n  if (!allCharacters.results.length) {\r\n    return (\r\n      <div className=\"spinner-border\" role=\"status\">\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className = 'container-fluid'>\r\n        <Header/>\r\n        <SelfCharactersCardsList arr={allCharacters.results}/>\r\n        <Pagination>\r\n          <Pagination.First href={`/characters/page=1`}/>\r\n          <Pagination.Prev href={`/characters/page=${(currentPage - 1) === 0 ? currentPage : currentPage - 1}`}/>\r\n          <Pagination.Item active>{currentPage}</Pagination.Item>\r\n          <Pagination.Next href={`/characters/page=${currentPage + 1}`}/>\r\n          <Pagination.Last href={`/characters/page=${totalPages}`}/>\r\n        </Pagination>\r\n    </div>\r\n  )\r\n}\r\nexport { CharacterCardsPage };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episodes-page\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episodes-page\\EpisodesPage.tsx",["182"],"import { useEffect } from 'react';\r\nimport { SelfEpisodesCardsList } from '../self-cards-list';\r\nimport { ApiRoutesEnum, GlobalStore } from '../../models';\r\nimport { api } from '../../utils';\r\nimport { episodesActions } from '../../store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Header } from '../header';\r\n\r\n\r\nconst EpisodesCardsPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const allEpisodes = useSelector((state: GlobalStore) => state.episode.allEpisodes);\r\n  const totalPages = useSelector((state: GlobalStore) => state.episode.allEpisodes.info.pages);\r\n  // const pageFromStore = useSelector((state: GlobalStore) => state.characters.page);\r\n  const location = useLocation();\r\n  \r\n  const currentPage = +location.pathname.split('page=')[1];\r\n  // const isPageNeedToReload = pageFromStore === currentPage ? false : true\r\n  console.log(location);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await api.getAllEpisodes(ApiRoutesEnum.getEp, currentPage);\r\n\r\n      if (res) {\r\n        dispatch(episodesActions.setAllEpisodes(res));\r\n      }\r\n    }\r\n    if (!allEpisodes.results.length) {\r\n      fetchData();\r\n    }\r\n  }, [currentPage])\r\n\r\n  if (!allEpisodes.results.length) {\r\n    return (\r\n      <div className=\"spinner-border\" role=\"status\">\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className = 'container-fluid'>\r\n      <Header/>\r\n        <SelfEpisodesCardsList arr={allEpisodes.results}/>\r\n        <Pagination>\r\n          <Pagination.First href={`/episodes/page=1`}/>\r\n          <Pagination.Prev href={`/episodes/page=${(currentPage - 1) === 0 ? currentPage : currentPage - 1}`}/>\r\n          <Pagination.Item active>{currentPage}</Pagination.Item>\r\n          <Pagination.Next href={`/episodes/page=${currentPage + 1}`}/>\r\n          <Pagination.Last href={`/episodes/page=${totalPages}`}/>\r\n        </Pagination>\r\n    </div>\r\n  )\r\n}\r\nexport { EpisodesCardsPage };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-page\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-page\\LocationPage.tsx",["183"],"import { useEffect } from 'react';\r\nimport { SelfLocationsCardsList } from '../self-cards-list';\r\nimport { ApiRoutesEnum, GlobalStore } from '../../models';\r\nimport { api } from '../../utils';\r\nimport { locationActions } from '../../store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Header } from '../header';\r\n\r\nconst LocationsCardsPage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const allLocations = useSelector((state: GlobalStore) => state.location.allLocations);\r\n  const totalPages = useSelector((state: GlobalStore) => state.location.allLocations.info.pages);\r\n  // const pageFromStore = useSelector((state: GlobalStore) => state.characters.page);\r\n  const location = useLocation();\r\n  console.log(allLocations);\r\n  \r\n  const currentPage = +location.pathname.split('page=')[1];\r\n  // const isPageNeedToReload = pageFromStore === currentPage ? false : true\r\n  console.log(location);\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await api.getAllLocations(ApiRoutesEnum.getLc, currentPage);\r\n\r\n      if (res) {\r\n        dispatch(locationActions.setAllLocations(res));\r\n      }\r\n    }\r\n    if (!allLocations.results.length) {\r\n      fetchData();\r\n    }\r\n  }, [currentPage])\r\n\r\n  if (!allLocations.results.length) {\r\n    return (\r\n      <div className=\"spinner-border\" role=\"status\">\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className = 'container-fluid'>\r\n        <Header/>\r\n        <SelfLocationsCardsList arr={allLocations.results}/>\r\n        <Pagination>\r\n          <Pagination.First href={`/locations/page=1`}/>\r\n          <Pagination.Prev href={`/locations/page=${(currentPage - 1) === 0 ? currentPage : currentPage - 1}`}/>\r\n          <Pagination.Item active>{currentPage}</Pagination.Item>\r\n          <Pagination.Next href={`/locations/page=${(currentPage + 1) > totalPages ? totalPages : currentPage + 1}`}/>\r\n          <Pagination.Last href={`/locations/page=${totalPages}`}/>\r\n        </Pagination>\r\n    </div>\r\n  )\r\n}\r\nexport { LocationsCardsPage };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\carousel-item\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\carousel-item\\CarouselItem.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-self-window\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\location-self-window\\LocationWindow.tsx",["184"],"import { Carousel } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ApiRoutesEnum, GlobalStore } from '../../models';\r\nimport { useEffect } from \"react\";\r\nimport { api } from \"../../utils\";\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport { characterActions, locationActions } from '../../store';\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search)\r\n\r\nconst LocationWindow: React.FC = () => {\r\n\r\n  const url = useQuery().get('id');\r\n  const dispatch = useDispatch();\r\n  const location = useSelector((state: GlobalStore) => state.location.oneLocation);\r\n  const locationResidents = useSelector((state: GlobalStore) => state.characters.multiplyCharacters);\r\n\r\n  useEffect(() => {\r\n    async function fetchLocationData() {\r\n      const res = await api.getOneLocation(`${ApiRoutesEnum.getLc}/${url}`);\r\n      const residentsForRequest = res.residents.map((el) => {\r\n        return el.split('/character/')[1];\r\n      })\r\n      const residentsRes = await api.getMultiplyCharacters(`${ApiRoutesEnum.getCh}/${residentsForRequest}`)\r\n      \r\n      if (res) {\r\n        dispatch(locationActions.setOneLocation(res));\r\n      }\r\n      if (residentsRes) {\r\n        dispatch(characterActions.setMultiplyCharacters(residentsRes));\r\n      }\r\n    }\r\n    fetchLocationData();\r\n  }, [url])\r\n  const { name, type, dimension } = location;\r\n\r\n  if (!location.id) {\r\n    return (\r\n      <div>Loading</div>\r\n      )     \r\n  }\r\n\r\n  return (\r\n    <div className='container' style={{marginTop: '15px'}}>\r\n      <div>\r\n        <h1>{name}</h1>\r\n        <span>Type: {type}<br/>Dimension: {dimension}<br/></span>\r\n        {/* <div className='container d-flex'> */}\r\n        <Carousel fade={true} slide={false}>\r\n      {\r\n        locationResidents && locationResidents.length ? locationResidents.map((el, index) => {\r\n          return (\r\n            <Carousel.Item>\r\n              <img src={el.image} alt={el.name} key={index}/>\r\n              <Carousel.Caption>\r\n                <Link to={`/characters/${el.id}`} style={{textDecoration: 'none', color: 'white'}}><h3>{el.name}</h3></Link>\r\n              </Carousel.Caption>\r\n            </Carousel.Item>\r\n          )\r\n        }) : <span>There is no residents</span>\r\n      }\r\n      </Carousel>\r\n      {/* </div> */}\r\n      </div>\r\n\r\n      {/* <SelfCharactersCardsList arr={locationResidents}/> */}\r\n    </div>\r\n  )\r\n}\r\nexport { LocationWindow };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\header\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episode-self-window\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\episode-self-window\\EpisodeWindow.tsx",["185"],"import { Carousel } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ApiRoutesEnum, GlobalStore } from '../../models';\r\nimport { useEffect } from \"react\";\r\nimport { api } from \"../../utils\";\r\nimport { useLocation, Link } from 'react-router-dom';\r\nimport { characterActions, episodesActions } from '../../store';\r\n\r\nconst useQuery = () => new URLSearchParams(useLocation().search)\r\n\r\nconst EpisodeWindow: React.FC = () => {\r\n\r\n  const url = useQuery().get('id');\r\n  const dispatch = useDispatch();\r\n  const oneEpisode = useSelector((state: GlobalStore) => state.episode.oneEpisode);\r\n  const episodeCharacters = useSelector((state: GlobalStore) => state.characters.multiplyCharacters);\r\n\r\n  useEffect(() => {\r\n    async function fetchLocationData() {\r\n      const res = await api.getOneEpisode(`${ApiRoutesEnum.getEp}/${url}`);\r\n      const residentsForRequest = res.characters.map((el) => {\r\n        return el.split('/character/')[1];\r\n      })\r\n      const residentsRes = await api.getMultiplyCharacters(`${ApiRoutesEnum.getCh}/${residentsForRequest}`)\r\n      \r\n      if (res) {\r\n        dispatch(episodesActions.setOneEpisode(res));\r\n      }\r\n      if (residentsRes) {\r\n        dispatch(characterActions.setMultiplyCharacters(residentsRes));\r\n      }\r\n    }\r\n    fetchLocationData();\r\n  }, [url])\r\n  const { name, air_date, episode } = oneEpisode;\r\n\r\n  if (!oneEpisode.id) {\r\n    return (\r\n      <div>Loading</div>\r\n      )     \r\n  }\r\n\r\n  return (\r\n    <div className='container' style={{marginTop: '15px'}}>\r\n      <div>\r\n        <h1>{name}</h1>\r\n        <span>Air date: {air_date}<br/>Episode: {episode}<br/></span>\r\n        <Carousel fade={true} slide={false}>\r\n        {\r\n          episodeCharacters && episodeCharacters.length ? episodeCharacters.map((el, index) => {\r\n            return (\r\n              <Carousel.Item>\r\n                <img src={el.image} alt={el.name} key={index}/>\r\n                <Carousel.Caption>\r\n                  <Link to={`/characters/${el.id}`} style={{textDecoration: 'none', color: 'white'}}><h3>{el.name}</h3></Link>\r\n                </Carousel.Caption>\r\n              </Carousel.Item>\r\n            )\r\n          }) : <span>There is no residents</span>\r\n        }\r\n      </Carousel>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport { EpisodeWindow };","C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\search-page\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\search-page\\SearchPage.tsx",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-select\\index.ts",[],"C:\\Users\\Admin\\Documents\\work2021\\react_ts_rick_and_morty\\src\\components\\characters-select\\CharactersSelect.tsx",[],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":4,"column":10,"nodeType":"192","messageId":"193","endLine":4,"endColumn":17},{"ruleId":"194","severity":1,"message":"195","line":33,"column":6,"nodeType":"196","endLine":33,"endColumn":8,"suggestions":"197"},{"ruleId":"190","severity":1,"message":"198","line":10,"column":10,"nodeType":"192","messageId":"193","endLine":10,"endColumn":18},{"ruleId":"194","severity":1,"message":"199","line":42,"column":6,"nodeType":"196","endLine":42,"endColumn":8,"suggestions":"200"},{"ruleId":"194","severity":1,"message":"201","line":35,"column":6,"nodeType":"196","endLine":35,"endColumn":19,"suggestions":"202"},{"ruleId":"194","severity":1,"message":"203","line":36,"column":6,"nodeType":"196","endLine":36,"endColumn":19,"suggestions":"204"},{"ruleId":"194","severity":1,"message":"205","line":36,"column":6,"nodeType":"196","endLine":36,"endColumn":19,"suggestions":"206"},{"ruleId":"194","severity":1,"message":"207","line":34,"column":6,"nodeType":"196","endLine":34,"endColumn":11,"suggestions":"208"},{"ruleId":"194","severity":1,"message":"207","line":34,"column":6,"nodeType":"196","endLine":34,"endColumn":11,"suggestions":"209"},"no-native-reassign",["210"],"no-negated-in-lhs",["211"],"@typescript-eslint/no-unused-vars","'rejects' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allCharacters.results.length', 'currentPage', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["212"],"'Dropdown' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getEpisodesPageList', and 'id'. Either include them or remove the dependency array.",["213"],"React Hook useEffect has missing dependencies: 'allCharacters.results.length' and 'dispatch'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has missing dependencies: 'allEpisodes.results.length' and 'dispatch'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has missing dependencies: 'allLocations.results.length' and 'dispatch'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["217"],["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"219","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"228","fix":"230"},"Update the dependencies array to be: [allCharacters.results.length, currentPage, dispatch]",{"range":"231","text":"232"},"Update the dependencies array to be: [dispatch, getEpisodesPageList, id]",{"range":"233","text":"234"},{"range":"235","text":"232"},"Update the dependencies array to be: [allEpisodes.results.length, currentPage, dispatch]",{"range":"236","text":"237"},"Update the dependencies array to be: [allLocations.results.length, currentPage, dispatch]",{"range":"238","text":"239"},"Update the dependencies array to be: [dispatch, url]",{"range":"240","text":"241"},{"range":"242","text":"241"},[1000,1002],"[allCharacters.results.length, currentPage, dispatch]",[1726,1728],"[dispatch, getEpisodesPageList, id]",[1177,1190],[1295,1308],"[allEpisodes.results.length, currentPage, dispatch]",[1333,1346],"[allLocations.results.length, currentPage, dispatch]",[1336,1341],"[dispatch, url]",[1334,1339]]